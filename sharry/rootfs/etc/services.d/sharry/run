#!/usr/bin/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Sharry
# Runs Sharry
# ==============================================================================

readonly SHARRY=sharry.restserver
declare host
declare port
declare username
declare password
declare property
declare value
declare base_url
declare log_level
declare db_type=mariadb
declare database=sharry
declare -a conf_props=()




# --- Wait for Mariadb is running ---
# Basicaly, it save teh log of the addon in logfile.log and whait until
# see a log info of Mariadb i.e:"Successfully send service information to Home Assistant"
method=GET
resource="/addons/self/logs"
auth_header="Authorization: Bearer ${__BASHIO_SUPERVISOR_TOKEN}"
while ! grep 'Successfully send service information to Home Assistant' /logfile.log; do
    response=$(curl --silent --show-error \
        --write-out '\n%{http_code}' --request "${method}" \
        -H "${auth_header}" \
        -H "Content-Type: application/json" \
        "${__BASHIO_SUPERVISOR_API}${resource}"
    )
    status=${response##*$'\n'}
    response=${response%"$status"}
    printf "%s" "$response" > /logfile.log
    sleep 5
done

bashio::log.debug "Requested API resource: ${__BASHIO_SUPERVISOR_API}${resource}"
bashio::log.debug "Request method: ${method}"
bashio::log.debug "API HTTP Response code: ${status}"
bashio::log.debug "API Response: ${response}"




# --- Load USER'S CUSTOM configuration overrides ---
bashio::log.debug "Loading 'conf_overrides'..."
for var in $(bashio::config '1_conf_overrides|keys'); do
    property=$(bashio::config "1_conf_overrides[${var}].property")
    value=$(bashio::config "1_conf_overrides[${var}].value")
    if [[ ${property} =~ secret|password ]]; then
        bashio::log.info "Setting ${property} to ******"
    else
        bashio::log.info "Setting ${property} to ${value}"
    fi
    conf_props+=("-D${property}=${value//\"/\\\"}")
done




# --- SET MARIA DB URL ---
bashio::log.debug "Setting DB URL..."
if ! bashio::config.is_empty '5_remote_db_host'; then
    db_type=$(bashio::config '4_remote_db_type')
    host=$(bashio::config '5_remote_db_host')
    port=$(bashio::config '6_remote_db_port')
    username=$(bashio::config '7_remote_db_username')
    password=$(bashio::config '8_remote_db_password')
    database=$(bashio::config '9_remote_db_database')
else
    if ! bashio::services.available 'mysql'; then
        bashio::log.fatal
        bashio::log.fatal 'MariaDB addon not available and no alternate database supplied'
        bashio::log.fatal 'Ensure MariaDB is available or provide an alternate database'
        bashio::log.fatal
        bashio::exit.nok
    fi

    host=$(bashio::services 'mysql' 'host')
    port=$(bashio::services 'mysql' 'port')
    username=$(bashio::services 'mysql' 'username')
    password=$(bashio::services 'mysql' 'password')

    if bashio::config.true '21_reset_database'; then
        bashio::log.warning 'Resetting database...'
        echo "DROP DATABASE IF EXISTS \`${DATABASE}\`;" \
            | mysql -h "${host}" -P "${port}" -u "${username}" -p"${password}"
        # Remove `reset_database` option
        bashio::addon.option '21_reset_database'
    fi
fi
conf_props+=( \
    "-D${SHARRY}.backend.jdbc.url=jdbc:${db_type}://${host}:${port}/${database}" \
    "-D${SHARRY}.backend.jdbc.user=${username}" \
    "-D${SHARRY}.backend.jdbc.password=${password}" \
)




# --- SET UP DATABASE ---
# Default database
if bashio::config.exists '2_defaultStore'; then
    conf_props+=("-D${SHARRY}.backend.files.default-store=$(bashio::config '2_defaultStore')")
fi
# Maria_DB
if bashio::config.equals '2_defaultStore' 'database'; then
    bashio::log.info "Configuring Maria db storage..."
    conf_props+=("-D${SHARRY}.backend.files.stores.database.enabled=true")
fi
# Local_DB
if bashio::config.equals '2_defaultStore' 'filesystem'; then
    bashio::log.info "Configuring Local db storage..."
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.enabled=true")
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.directory=/share/$(bashio::config '3_local_db')")
    bashio::log.info "Local db storage locate at /share/$(bashio::config '3_local_db')"
fi




# --- SET UP COPY-FILE ---
if bashio::config.true '10_copy_db'; then
    bashio::log.info "Activate copy-file..."
    if bashio::config.equals '2_defaultStore' 'database'; then
        bashio::log.info "Configuring Local db storage..."
        conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.enabled=true")
        conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.directory=/share/$(bashio::config '3_local_db')")
    elif bashio::config.equals '2_defaultStore' 'filesystem'; then
        bashio::log.info "Configuring Maria db storage..."
        conf_props+=("-D${SHARRY}.backend.files.stores.database.enabled=true")
    fi
    conf_props+=("-D${SHARRY}.backend.files.copy-files.enable=$(bashio::config '10_copy_db')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.source=$(bashio::config '11_copy_db_source')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.target=$(bashio::config '12_copy_db_target')")
    bashio::log.info "Copy-file is activated FROM $(bashio::config '11_copy_db_source') TO $(bashio::config '12_copy_db_target')"
fi




# --- SET UP BASE URL ---
bashio::log.debug "Setting base URL for Sharry..."
if bashio::config.true '14_use_ssl'; then
    base_url='https://'
else
    base_url='http://'
fi
base_url+="$(bashio::config '13_domain')"
if bashio::var.has_value "$(bashio::addon.port 9090)"; then
    base_url+=":$(bashio::addon.port 9090)"
fi
bashio::log.info "Sharry will be available at ${base_url}"
conf_props+=("-D${SHARRY}.base-url=${base_url}")




# --- Add other config options to properties array ---
bashio::log.debug "Adding in secret, language, theme and share config options..."
conf_props+=("-D${SHARRY}.backend.auth.server-secret=$(bashio::config '18_server_secret')")

if bashio::config.exists '20_theme'; then
    conf_props+=("-D${SHARRY}.webapp.initial-theme=$(bashio::config '20_theme')")
fi

if ! bashio::config.is_empty '15_default_language'; then
    conf_props+=("-D${SHARRY}.webapp.default-language=$(bashio::config '15_default_language')")
fi

if bashio::config.exists '16_share_max_size_gb'; then
    conf_props+=("-D${SHARRY}.backend.share.max-size=$(bashio::config '16_share_max_size_gb')g")
fi

if bashio::config.exists '17_share_max_valid_days'; then
    conf_props+=("-D${SHARRY}.backend.share.max-validity=$(bashio::config '17_share_max_valid_days')d")
fi




# --- SET LOG LEVEL ---
# Can't be set with arguments or env variables, search & replace config file
case "$(bashio::config '19_log_level')" in \
    trace)      log_level='Trace' ;; \
    debug)      log_level='Debug' ;; \
    notice)     ;& \
    warning)    log_level='Warn' ;; \
    error)      ;& \
    fatal)      log_level='Error' ;; \
    *)          log_level='Info' ;; \
esac;
bashio::log.info "Sharry log level set to ${log_level}"
conf_props+=("-D${SHARRY}.logging.minimum-level=${log_level}")

# Print all config options for debugging
bashio::log.debug
bashio::log.debug "Printing all startup flags being provided to Sharry..."
for prop in "${conf_props[@]}"; do
    bashio::log.debug "${prop}"
done
bashio::log.debug




bashio::log.info "Handing over control to Sharry..."
exec /opt/sharry/bin/sharry-restserver "${conf_props[@]}" -- /etc/sharry/sharry.conf
