#!/usr/bin/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Sharry
# Runs Sharry
# ==============================================================================

####------ MARIA DB ------####
MARIADB_DATA=/data/databases
NEW_INSTALL=false

# Init mariadb
if ! bashio::fs.directory_exists "${MARIADB_DATA}"; then
    bashio::log.info "Create a new mariadb initial system"
    mysql_install_db --user=root --datadir="${MARIADB_DATA}" --skip-name-resolve --skip-test-db > /dev/null
    NEW_INSTALL=true
else
    bashio::log.info "Using existing mariadb initial system"
fi

# Redirect log output
rm -f "${MARIADB_DATA}/mariadb.err"
ln -s /proc/1/fd/1 "${MARIADB_DATA}/mariadb.err"

# Start mariadb
bashio::log.info "Starting MariaDB"
mysqld_safe --datadir="${MARIADB_DATA}" --user=root < /dev/null &
MARIADB_PID=$!

# Wait until DB is running
while ! mysql -e "" 2> /dev/null; do
    sleep 1
done

bashio::log.info "Check data integrity and fix corruptions"
mysqlcheck --no-defaults --databases mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --databases mysql --check --check-upgrade --auto-repair || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --fix-db-names --fix-table-names || true
mysqlcheck --no-defaults --all-databases --skip-database=mysql --check --check-upgrade --auto-repair || true

bashio::log.info "Ensuring internal database upgrades are performed"
mysql_upgrade --silent

# Set default secure values after initial setup
if bashio::var.true "${NEW_INSTALL}"; then
    # Secure the installation.
    mysql <<-EOSQL
        SET @@SESSION.SQL_LOG_BIN=0;
        DELETE FROM
            mysql.user
        WHERE
            user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
                OR host NOT IN ('localhost');
        DELETE FROM
            mysql.proxies_priv
        WHERE
            user NOT IN ('mysql.sys', 'mariadb.sys', 'mysqlxsys', 'root', 'mysql', 'proxies_priv')
                OR host NOT IN ('localhost');
        DROP DATABASE IF EXISTS test;
        FLUSH PRIVILEGES;
EOSQL
fi

# Init databases
bashio::log.info "Ensure databases exists"
for database in $(bashio::config "databases"); do
    bashio::log.info "Create database ${database}"
    mysql -e "CREATE DATABASE ${database};" 2> /dev/null || true
done

# Init logins
bashio::log.info "Ensure users exists and are updated"
for login in $(bashio::config "logins|keys"); do
    USERNAME=$(bashio::config "logins[${login}].username")
    PASSWORD=$(bashio::config "logins[${login}].password")

    if mysql -e "SET PASSWORD FOR '${USERNAME}'@'%' = PASSWORD('${PASSWORD}');" 2> /dev/null; then
        bashio::log.info "Update user ${USERNAME}"
    else
        bashio::log.info "Create user ${USERNAME}"
        mysql -e "CREATE USER '${USERNAME}'@'%' IDENTIFIED BY '${PASSWORD}';" 2> /dev/null || true
    fi
done

# Init rights
bashio::log.info "Init/Update rights"
for right in $(bashio::config "rights|keys"); do
    USERNAME=$(bashio::config "rights[${right}].username")
    DATABASE=$(bashio::config "rights[${right}].database")

    if bashio::config.exists "rights[${right}].privileges"; then
        PRIVILEGES=$(bashio::config "rights[${right}].privileges")
        bashio::log.info "Granting ${PRIVILEGES} to ${USERNAME} on ${DATABASE}"
        mysql -e "REVOKE ALL PRIVILEGES ON ${DATABASE}.* FROM '${USERNAME}'@'%';" || true
        mysql -e "GRANT ${PRIVILEGES} ON ${DATABASE}.* TO '${USERNAME}'@'%';" || true
    else
        bashio::log.info "Granting all privileges to ${USERNAME} on ${DATABASE}"
        mysql -e "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO '${USERNAME}'@'%';" 2> /dev/null || true
    fi
done

# Generate service user
if ! bashio::fs.file_exists "/data/secret"; then
    pwgen 64 1 > /data/secret
fi
SECRET=$(</data/secret)
mysql -e "CREATE USER 'service'@'172.30.32.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "CREATE USER 'service'@'172.30.33.%' IDENTIFIED BY '${SECRET}';" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.32.%' WITH GRANT OPTION;" 2> /dev/null || true
mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'service'@'172.30.33.%' WITH GRANT OPTION;" 2> /dev/null || true

# Flush privileges
mysql -e "FLUSH PRIVILEGES;" 2> /dev/null || true

# Send service information to the Supervisor
PAYLOAD=$(\
    bashio::var.json \
        host "$(hostname)" \
        port "^3306" \
        username "service" \
        password "${SECRET}"
)
if bashio::services.publish "mysql" "${PAYLOAD}"; then
    bashio::log.info "Successfully send service information to Home Assistant."
else
    bashio::log.warning "Service message to Home Assistant failed!"
fi

# Register stop
function stop_mariadb() {
    bashio::services.delete "mysql"
    mysqladmin shutdown
    # Successful exit, avoid wait exit status to propagate
    exit 0
}
trap "stop_mariadb" SIGTERM SIGHUP





####------ SHARRY ------####

readonly SHARRY=sharry.restserver
declare host
declare port
declare username
declare password
declare property
declare value
declare base_url
declare log_level
declare db_type=mariadb
declare database=sharry
declare -a conf_props=()

# --- Load USER'S CUSTOM configuration overrides ---
bashio::log.debug "Loading 'conf_overrides'..."
for var in $(bashio::config 'conf_overrides|keys'); do
    property=$(bashio::config "conf_overrides[${var}].property")
    value=$(bashio::config "conf_overrides[${var}].value")
    if [[ ${property} =~ secret|password ]]; then
        bashio::log.info "Setting ${property} to ******"
    else
        bashio::log.info "Setting ${property} to ${value}"
    fi
    conf_props+=("-D${property}=${value//\"/\\\"}")
done




# --- SET MARIA DB URL ---
bashio::log.debug "Setting DB URL..."
if ! bashio::config.is_empty 'remote_db_host'; then
    db_type=$(bashio::config 'remote_db_type')
    host=$(bashio::config 'remote_db_host')
    port=$(bashio::config 'remote_db_port')
    username=$(bashio::config 'remote_db_username')
    password=$(bashio::config 'remote_db_password')
    database=$(bashio::config 'remote_db_database')
else
    if ! bashio::services.available 'mysql'; then
        bashio::log.fatal
        bashio::log.fatal 'MariaDB addon not available and no alternate database supplied'
        bashio::log.fatal 'Ensure MariaDB is available or provide an alternate database'
        bashio::log.fatal
        bashio::exit.nok
    fi

    host=$(bashio::services 'mysql' 'host')
    port=$(bashio::services 'mysql' 'port')
    username=$(bashio::services 'mysql' 'username')
    password=$(bashio::services 'mysql' 'password')

    if bashio::config.true 'reset_database'; then
        bashio::log.warning 'Resetting database...'
        echo "DROP DATABASE IF EXISTS \`${DATABASE}\`;" \
            | mysql -h "${host}" -P "${port}" -u "${username}" -p"${password}"
        # Remove `reset_database` option
        bashio::addon.option 'reset_database'
    fi

    # Create database if it doesn't exist
    echo "CREATE DATABASE IF NOT EXISTS \`${DATABASE}\`;" \
        | mysql -h "${host}" -P "${port}" -u "${username}" -p"${password}"
fi
conf_props+=( \
    "-D${SHARRY}.backend.jdbc.url=jdbc:${db_type}://${host}:${port}/${database}" \
    "-D${SHARRY}.backend.jdbc.user=${username}" \
    "-D${SHARRY}.backend.jdbc.password=${password}" \
)




# --- SET UP DATABASE ---
# Default database
if bashio::config.exists 'DefaultStore'; then
    conf_props+=("-D${SHARRY}.backend.files.default-store=$(bashio::config 'DefaultStore')")
fi
# Maria_DB
if bashio::config.true 'use_maria_db'; then
    bashio::log.info "Configuring Maria db..."
    conf_props+=("-D${SHARRY}.backend.files.stores.database.enabled=$(bashio::config 'use_maria_db')")
fi
# Local_DB
if bashio::config.true 'use_local_db'; then
    bashio::log.info "Configuring Local db..."
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.enabled=$(bashio::config 'use_local_db')")
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.directory=/share/$(bashio::config 'local_db')")
    bashio::log.info "Local db locate at /share/$(bashio::config 'local_db')"
fi




# --- SET UP COPY-FILE ---
if bashio::config.true 'copy_db'; then
    bashio::log.info "Activate copy-file..."
    conf_props+=("-D${SHARRY}.backend.files.copy-files.enable=$(bashio::config 'copy_db')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.source=$(bashio::config 'copy_db_source')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.target=$(bashio::config 'copy_db_target')")
    bashio::log.info "Copy-file is activated FROM $(bashio::config 'copy_db_source') TO $(bashio::config 'copy_db_target')"
fi




# --- SET UP BASE URL ---
bashio::log.debug "Setting base URL for Sharry..."
if bashio::config.true 'use_ssl'; then
    base_url='https://'
else
    base_url='http://'
fi
base_url+="$(bashio::config 'domain')"
if bashio::var.has_value "$(bashio::addon.port 9090)"; then
    base_url+=":$(bashio::addon.port 9090)"
fi
bashio::log.info "Sharry will be available at ${base_url}"
conf_props+=("-D${SHARRY}.base-url=${base_url}")




# --- Add other config options to properties array ---
bashio::log.debug "Adding in secret, language, theme and share config options..."
conf_props+=("-D${SHARRY}.backend.auth.server-secret=$(bashio::config 'server_secret')")

if bashio::config.exists 'theme'; then
    conf_props+=("-D${SHARRY}.webapp.initial-theme=$(bashio::config 'theme')")
fi

if ! bashio::config.is_empty 'default_language'; then
    conf_props+=("-D${SHARRY}.webapp.default-language=$(bashio::config 'default_language')")
fi

if bashio::config.exists 'share_max_size_gb'; then
    conf_props+=("-D${SHARRY}.backend.share.max-size=$(bashio::config 'share_max_size_gb')g")
fi

if bashio::config.exists 'share_max_valid_days'; then
    conf_props+=("-D${SHARRY}.backend.share.max-validity=$(bashio::config 'share_max_valid_days')d")
fi




# --- SET LOG LEVEL ---
# Can't be set with arguments or env variables, search & replace config file
case "$(bashio::config 'log_level')" in \
    trace)      log_level='Trace' ;; \
    debug)      log_level='Debug' ;; \
    notice)     ;& \
    warning)    log_level='Warn' ;; \
    error)      ;& \
    fatal)      log_level='Error' ;; \
    *)          log_level='Info' ;; \
esac;
bashio::log.info "Sharry log level set to ${log_level}"
conf_props+=("-D${SHARRY}.logging.minimum-level=${log_level}")

# Print all config options for debugging
bashio::log.debug
bashio::log.debug "Printing all startup flags being provided to Sharry..."
for prop in "${conf_props[@]}"; do
    bashio::log.debug "${prop}"
done
bashio::log.debug




bashio::log.info "Handing over control to Sharry..."
exec /opt/sharry/bin/sharry-restserver "${conf_props[@]}" -- /etc/sharry/sharry.conf
 